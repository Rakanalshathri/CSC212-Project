public class InvIndexPhotoManager {
    private BST<MyLinkedList<Photo>> index;

    public InvIndexPhotoManager() {
        index = new BST<>();
    }

    // Adds a photo under each of its tags in the BST
    public void addPhoto(Photo p) {
        MyLinkedList<String> tags = p.getTags();
        MyLinkedList.Node<String> current = tags.getHead();

        while (current != null) {
            String tag = current.data;
            MyLinkedList<Photo> photosList = index.search(tag);

            if (photosList == null) {
                photosList = new MyLinkedList<>();
                index.insert(tag, photosList);
            }

            photosList.insert(p);
            current = current.next;
        }
    }

    // Removes a photo (by path) from all tag lists and deletes tags that become empty
    public void deletePhoto(String path) {
        deletePhotoFromBST(index.getRoot(), path);
    }

    // Recursively removes the photo from all tag-linked lists in the BST
    private void deletePhotoFromBST(BSTNode<MyLinkedList<Photo>> node, String path) {
        if (node == null) {
            return;
        }

        removeFromList(node.value, path);

        if (node.value.getHead() == null) {
            index.deleteKey(node.key);
        }

        deletePhotoFromBST(node.left, path);
        deletePhotoFromBST(node.right, path);
    }

    // Reconstructs the linked list without the photo that matches the given path
    private void removeFromList(MyLinkedList<Photo> list, String path) {
        MyLinkedList<Photo> newList = new MyLinkedList<>();
        MyLinkedList.Node<Photo> current = list.getHead();

        while (current != null) {
            if (!current.data.getPath().equals(path)) {
                newList.insert(current.data);
            }
            current = current.next;
        }

        list.head = newList.getHead();
    }

    // Returns the BST that maps tags to lists of photos
    public BST<MyLinkedList<Photo>> getPhotos() {
        return index;
    }
}
