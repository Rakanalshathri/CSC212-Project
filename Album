// Album for phase 1
public class Album {
    private String name;
    private String condition;
    private PhotoManager manager;

    public Album(String name, String condition, PhotoManager manager) {
        this.name = name;
        this.condition = condition;
        this.manager = manager;
    }

    // Returns the name of the album
    public String getName() {
        return name;
    }

    // Returns the search condition used to filter photos
    public String getCondition() {
        return condition;
    }

    // Returns the PhotoManager associated with this album
    public PhotoManager getManager() {
        return manager;
    }

    // Returns a list of photos that match all the tags specified in the album's condition
    public MyLinkedList<Photo> getPhotos() {
        MyLinkedList<Photo> result = new MyLinkedList<>();

        boolean isEmpty = true;
        for (int i = 0; i < condition.length(); i++) {
            if (condition.charAt(i) != ' ') {
                isEmpty = false;
                break;
            }
        }

        String[] requiredTags;
        if (isEmpty) {
            requiredTags = new String[0];
        } else {
            requiredTags = condition.split("AND");
        }

        MyLinkedList.Node<Photo> current = manager.getPhotos().getHead();
        while (current != null) {
            Photo photo = current.data;
            boolean match = true;

            for (int i = 0; i < requiredTags.length; i++) {
                String tag = requiredTags[i];
                String cleanedTag = cleanSpaces(tag);

                boolean found = false;
                MyLinkedList.Node<String> tagNode = photo.getTags().getHead();
                while (tagNode != null) {
                    if (tagNode.data.equals(cleanedTag)) {
                        found = true;
                        break;
                    }
                    tagNode = tagNode.next;
                }
                if (!found) {
                    match = false;
                    break;
                }
            }

            if (match) {
                result.insert(photo);
            }
            current = current.next;
        }
        return result;
    }

    // Returns the number of tag comparisons made during the photo filtering process
    public int getNbComps() {
        int comps = 0;

        boolean isEmpty = true;
        for (int i = 0; i < condition.length(); i++) {
            if (condition.charAt(i) != ' ') {
                isEmpty = false;
                break;
            }
        }

        String[] requiredTags;
        if (isEmpty) {
            requiredTags = new String[0];
        } else {
            requiredTags = condition.split("AND");
        }

        MyLinkedList.Node<Photo> current = manager.getPhotos().getHead();
        while (current != null) {
            Photo photo = current.data;
            for (int i = 0; i < requiredTags.length; i++) {
                comps++;
                String tag = requiredTags[i];
                String cleanedTag = cleanSpaces(tag);

                boolean found = false;
                MyLinkedList.Node<String> tagNode = photo.getTags().getHead();
                while (tagNode != null) {
                    if (tagNode.data.equals(cleanedTag)) {
                        found = true;
                        break;
                    }
                    tagNode = tagNode.next;
                }
                if (!found) {
                    break;
                }
            }
            current = current.next;
        }
        return comps;
    }

    //removes leading and trailing spaces from a tag string
    private String cleanSpaces(String str) {
        int start = 0;
        int end = str.length() - 1;

        while (start <= end && str.charAt(start) == ' ') {
            start++;
        }
        while (end >= start && str.charAt(end) == ' ') {
            end--;
        }

        String cleaned = "";
        for (int i = start; i <= end; i++) {
            cleaned = cleaned + str.charAt(i);
        }

        return cleaned;
    }
}
